                                                    Java Input/Output

Q1.Streams in Java (InputStream, OutputStream)
Ans:
    InputStream
    An abstract class used for reading data byte by byte from a source.

    Common Methods
    -int read(): Reads the next byte of data (returns -1 if the end of the stream is reached).
    -int read(byte[] b): Reads up to b.length bytes into the byte array.
    -void close(): Closes the stream and releases system resources.

    Common Subclasses
    FileInputStream: Reads bytes from a file.
    Use case: Reading data from a file.

    BufferedInputStream: Adds buffering to reduce the number of I/O operations.
    Use case: Improving performance for larger files.
    
    ObjectInputStream: Reads objects serialized into a stream.
    Use case: Deserializing objects.

    An abstract class used for writing data byte by byte to a destination.

    Common Methods
    -void write(int b): Writes a single byte to the output stream.
    -void write(byte[] b): Writes all bytes from the array to the stream.
    -void flush(): Flushes the stream, ensuring all buffered output is written.
    -void close(): Closes the stream.

    Common Subclasses
    FileOutputStream: Writes bytes to a file.
    Use case: Writing data to a file.
    
    BufferedOutputStream: Adds buffering to reduce the number of I/O operations.
    Use case: Improving performance when writing large files.
    
    ObjectOutputStream: Writes objects serialized into a stream.
    Use case: Serializing objects.

o Reading and Writing Data Using Streams
o Handling File I/O Operations