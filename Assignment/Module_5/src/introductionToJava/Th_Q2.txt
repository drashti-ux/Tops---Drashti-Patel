Q2.Features of Java (Platform Independent, Object-Oriented, etc.)
Ans:
    1.Platform Independence (WORA)
    Java's "write once, run anywhere" (WORA) capability means that Java code can run on any device with a Java Virtual Machine (JVM), regardless of the underlying operating system or hardware. This platform independence is achieved through bytecode, which is the intermediate code generated by the Java compiler and executed by the JVM.
    2. Object-Oriented
    Java is a pure object-oriented programming language, meaning it revolves around objects and classes. This makes code modular, flexible, and easy to understand. The object-oriented principles in Java include inheritance, encapsulation, polymorphism, and abstraction.
    
    3. Simple and Easy to Learn
    Java was designed to be simple, especially compared to languages like C++. It removed complex features such as pointers and operator overloading, making it easier to learn, use, and debug.

    4. Secure
    Java has built-in security features, such as the Java Security Manager, which helps protect systems from malicious code by defining access rules for classes. Additionally, Java's lack of explicit pointers reduces the risk of memory corruption and unauthorized memory access.

    5. Robust
    Java is known for its robustness and reliability. Features like strong memory management, garbage collection, and exception handling contribute to its stability, as they help avoid memory leaks and handle errors gracefully.
    
    6. Automatic Memory Management (Garbage Collection)
    Java provides automatic memory management through garbage collection, where unused objects are automatically removed from memory. This helps developers focus on coding without worrying about manual memory allocation and deallocation.

    7. Multithreaded
    Java has built-in support for multithreading, allowing programs to perform multiple tasks simultaneously. This is particularly useful in applications that require high responsiveness, like games or real-time systems.

    8. Distributed Computing.
    Java supports distributed computing through libraries such as Remote Method Invocation (RMI) and CORBA, which enable Java programs to interact across networks. Java's networking capabilities make it well-suited for building applications that span multiple systems.

    9. High Performance with JIT Compiler
    Although Java is interpreted, it achieves high performance with the Just-In-Time (JIT) compiler. The JIT compiler compiles bytecode to machine code at runtime, improving execution speed by converting frequently executed parts of the code.

    10. Dynamic and Extensible
    Java is designed to be dynamic, meaning it can adapt to an evolving environment. It supports dynamic loading of classes and interfaces at runtime, making it highly extensible. This feature allows Java to be compatible with new technologies and systems.

    11. Rich Standard Library
    Java has an extensive standard library, known as the Java API, which provides tools for input/output (I/O), networking, data structures, and utilities. This comprehensive library helps developers avoid reinventing the wheel and accelerates the development process.

    12. Backward Compatibility
    Java strives to maintain backward compatibility across versions, allowing older Java applications to run on newer JVM versions without modification. This ensures stability for enterprises and developers working on long-term projects.
    
    13. Community and Ecosystem
    Java has a large and active community, and a vast ecosystem of frameworks (like Spring and Hibernate), libraries, and development tools. This makes it easy to find resources, solutions, and libraries for most development needs.